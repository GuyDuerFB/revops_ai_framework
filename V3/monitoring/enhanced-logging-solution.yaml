AWSTemplateFormatVersion: '2010-09-09'
Description: 'Enhanced Logging and Monitoring for RevOps Slack-Bedrock Integration'

Parameters:
  ProjectName:
    Type: String
    Default: revops-slack-bedrock
    Description: Name prefix for all resources

Resources:
  # CloudWatch Dashboard for Real-time Monitoring
  RevOpsDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-monitoring'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${ProjectName}-handler" ],
                  [ "...", "${ProjectName}-processor" ],
                  [ ".", "Errors", ".", "${ProjectName}-handler" ],
                  [ "...", "${ProjectName}-processor" ],
                  [ ".", "Throttles", ".", "${ProjectName}-handler" ],
                  [ "...", "${ProjectName}-processor" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "us-east-1",
                "title": "Lambda Performance Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "NumberOfMessagesSent", "QueueName", "${ProjectName}-processing-queue" ],
                  [ ".", "NumberOfMessagesReceived", ".", "." ],
                  [ ".", "ApproximateNumberOfVisibleMessages", ".", "." ],
                  [ ".", "NumberOfMessagesSent", ".", "${ProjectName}-dlq" ],
                  [ ".", "ApproximateNumberOfVisibleMessages", ".", "${ProjectName}-dlq" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "us-east-1",
                "title": "SQS Queue Metrics"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 12,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/${ProjectName}-processor'\n| filter @message like /ERROR/\n| fields @timestamp, @message\n| sort @timestamp desc\n| limit 20",
                "region": "us-east-1",
                "title": "Recent Processor Errors",
                "period": 300
              }
            }
          ]
        }

  # CloudWatch Alarms for Critical Issues
  ProcessorErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-processor-errors'
      AlarmDescription: 'High error rate in processor Lambda'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub '${ProjectName}-processor'
      AlarmActions:
        - !Ref AlertTopic

  ProcessorTimeoutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-processor-timeouts'
      AlarmDescription: 'Processor Lambda hitting timeout limits'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 290000  # 290 seconds (near 300s timeout)
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub '${ProjectName}-processor'
      AlarmActions:
        - !Ref AlertTopic

  DeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-dlq-messages'
      AlarmDescription: 'Messages in dead letter queue indicate failures'
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !Sub '${ProjectName}-dlq'
      AlarmActions:
        - !Ref AlertTopic

  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-alerts'
      DisplayName: 'RevOps Slack Bot Alerts'

  # Note: CloudWatch Insights Queries will be created separately via API

  # Enhanced Log Retention
  ProcessorLogRetention:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-processor-detailed'
      RetentionInDays: 90

  HandlerLogRetention:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-handler-detailed'
      RetentionInDays: 90

  # Lambda Function for Enhanced Logging
  LogAnalyzerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-log-analyzer'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LogAnalyzerRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import re
          from datetime import datetime, timedelta
          
          logs_client = boto3.client('logs')
          sns_client = boto3.client('sns')
          
          def lambda_handler(event, context):
              """Analyze logs for patterns and alert on critical issues"""
              
              # Query for timeout patterns in last hour
              end_time = datetime.utcnow()
              start_time = end_time - timedelta(hours=1)
              
              query = """
              fields @timestamp, @message, @requestId
              | filter @message like /ReadTimeoutError/ or @message like /timed out/
              | stats count() by bin(5m)
              """
              
              try:
                  response = logs_client.start_query(
                      logGroupName='/aws/lambda/revops-slack-bedrock-processor',
                      startTime=int(start_time.timestamp()),
                      endTime=int(end_time.timestamp()),
                      queryString=query
                  )
                  
                  # Additional analysis logic here
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Log analysis completed')
                  }
                  
              except Exception as e:
                  print(f"Error in log analysis: {e}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }

  LogAnalyzerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LogAnalyzerPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:StartQuery
                  - logs:GetQueryResults
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - sns:Publish
                Resource: '*'

  # Scheduled Event for Regular Log Analysis
  LogAnalyzerSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-log-analyzer-schedule'
      Description: 'Run log analysis every 15 minutes'
      ScheduleExpression: 'rate(15 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt LogAnalyzerFunction.Arn
          Id: 'LogAnalyzerTarget'

  LogAnalyzerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LogAnalyzerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LogAnalyzerSchedule.Arn

Outputs:
  DashboardURL:
    Description: 'CloudWatch Dashboard URL'
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#dashboards:name=${ProjectName}-monitoring'
    
  AlertTopicArn:
    Description: 'SNS Topic ARN for alerts'
    Value: !Ref AlertTopic
    
  LogAnalyzerFunctionArn:
    Description: 'Log Analyzer Lambda Function ARN'
    Value: !GetAtt LogAnalyzerFunction.Arn
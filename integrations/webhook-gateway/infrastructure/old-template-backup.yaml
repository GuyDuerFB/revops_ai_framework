AWSTemplateFormatVersion: '2010-09-09'
Description: 'RevOps AI Framework - Webhook Gateway Infrastructure (Simplified)'

Parameters:
  EnvironmentName:
    Type: String
    Default: 'prod'
    Description: Environment name for resource naming
    
  ManagerAgentFunctionName:
    Type: String
    Default: 'revops-manager-agent-wrapper'
    Description: Name of the Manager Agent wrapper Lambda function
    
  BedrockAgentId:
    Type: String
    Default: 'PVWGKOWSOT'
    Description: Bedrock Agent ID for the Manager Agent
    
  BedrockAgentAliasId:
    Type: String
    Default: 'TSTALIASID'
    Description: Bedrock Agent Alias ID for the Manager Agent
    
  DealAnalysisWebhookUrl:
    Type: String
    Default: ''
    Description: Webhook URL for deal analysis responses
    
  DataAnalysisWebhookUrl:
    Type: String
    Default: ''
    Description: Webhook URL for data analysis responses
    
  LeadAnalysisWebhookUrl:
    Type: String
    Default: ''
    Description: Webhook URL for lead analysis responses
    
  GeneralWebhookUrl:
    Type: String
    Default: ''
    Description: Fallback webhook URL for general responses
    
  LogLevel:
    Type: String
    Default: 'INFO'
    AllowedValues: ['DEBUG', 'INFO', 'WARNING', 'ERROR']
    Description: Lambda function log level

Resources:
  # SQS Queue for outbound webhook delivery (minimal config)
  OutboundWebhookQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${EnvironmentName}-revops-webhook-outbound-queue'

  # IAM Role for Manager Agent Wrapper Lambda
  ManagerAgentWrapperRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-revops-manager-agent-wrapper-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ManagerAgentWrapperPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow invoking Bedrock Agent
              - Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${BedrockAgentId}/${BedrockAgentAliasId}'
              # CloudWatch Logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda function for Manager Agent wrapper
  ManagerAgentWrapperFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref ManagerAgentFunctionName
      Runtime: python3.9
      Handler: manager_agent_wrapper.lambda_handler
      Role: !GetAtt ManagerAgentWrapperRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'success': False, 'error': 'Function not yet deployed'}
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          BEDROCK_AGENT_ID: !Ref BedrockAgentId
          BEDROCK_AGENT_ALIAS_ID: !Ref BedrockAgentAliasId
          LOG_LEVEL: !Ref LogLevel

  # IAM Role for Webhook Gateway Lambda
  WebhookGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-revops-webhook-gateway-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: WebhookGatewayPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow invoking Manager Agent
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !GetAtt ManagerAgentWrapperFunction.Arn
              # Allow SQS operations for outbound queue
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt OutboundWebhookQueue.Arn
              # CloudWatch Logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda function for webhook gateway
  WebhookGatewayFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvironmentName}-revops-webhook-gateway'
      Runtime: python3.9
      Handler: webhook_handler.lambda_handler
      Role: !GetAtt WebhookGatewayRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Function not yet deployed')}
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          MANAGER_AGENT_FUNCTION_NAME: !Ref ManagerAgentWrapperFunction
          OUTBOUND_WEBHOOK_QUEUE_URL: !Ref OutboundWebhookQueue
          DEAL_ANALYSIS_WEBHOOK_URL: !Ref DealAnalysisWebhookUrl
          DATA_ANALYSIS_WEBHOOK_URL: !Ref DataAnalysisWebhookUrl
          LEAD_ANALYSIS_WEBHOOK_URL: !Ref LeadAnalysisWebhookUrl
          GENERAL_WEBHOOK_URL: !Ref GeneralWebhookUrl
          LOG_LEVEL: !Ref LogLevel

  # API Gateway for webhook endpoint
  WebhookApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${EnvironmentName}-revops-webhook-gateway-api'
      Description: 'API Gateway for RevOps AI Framework Webhook Gateway'

  # API Gateway Resource for webhook endpoint
  WebhookResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebhookApi
      ParentId: !GetAtt WebhookApi.RootResourceId
      PathPart: 'webhook'

  # API Gateway Method for POST to webhook
  WebhookMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebhookApi
      ResourceId: !Ref WebhookResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebhookGatewayFunction.Arn}/invocations'

  # API Gateway Deployment
  WebhookApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: WebhookMethod
    Properties:
      RestApiId: !Ref WebhookApi
      StageName: !Ref EnvironmentName

  # Lambda permission for API Gateway
  WebhookGatewayApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebhookGatewayFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebhookApi}/*/POST/webhook'

Outputs:
  WebhookEndpoint:
    Description: 'Webhook Gateway API endpoint URL'
    Value: !Sub 'https://${WebhookApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}/webhook'
    Export:
      Name: !Sub '${EnvironmentName}-revops-webhook-endpoint'

  WebhookGatewayFunctionName:
    Description: 'Webhook Gateway Lambda function name'
    Value: !Ref WebhookGatewayFunction
    Export:
      Name: !Sub '${EnvironmentName}-revops-webhook-gateway-function-name'

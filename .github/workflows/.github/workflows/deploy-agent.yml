name: Agent Deployment

on:
  workflow_dispatch:
    inputs:
      agent_name:
        description: 'Name of the agent directory to deploy (under agents/)'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: false
        type: choice
        options:
          - dev
          - staging
          - prod
        default: dev
      dry_run:
        description: 'Preview changes without deployment (dry run)'
        required: false
        type: boolean
        default: false

jobs:
  deploy-agent-to-aws:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # Required for OIDC
      contents: read    # Required to checkout repository
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::740202120544:role/GitHubActionsRevOpsKBSyncRole
        role-session-name: GitHubActionsAgentDeploy
        aws-region: us-east-1
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install boto3 botocore
    
    - name: Validate agent directory
      id: validate
      run: |
        AGENT_DIR="agents/${{ github.event.inputs.agent_name }}"
        INSTRUCTIONS_FILE="${AGENT_DIR}/instructions.md"
        
        echo "üîç Validating agent directory structure..."
        echo "Agent directory: ${AGENT_DIR}"
        echo "Instructions file: ${INSTRUCTIONS_FILE}"
        
        # Check if agent directory exists
        if [ ! -d "${AGENT_DIR}" ]; then
          echo "‚ùå Error: Agent directory '${AGENT_DIR}' does not exist"
          echo "Available agents:"
          ls -la agents/ | grep '^d' | grep -v '\.$' || echo "No agent directories found"
          exit 1
        fi
        
        # Check if instructions.md exists
        if [ ! -f "${INSTRUCTIONS_FILE}" ]; then
          echo "‚ùå Error: Instructions file '${INSTRUCTIONS_FILE}' does not exist"
          echo "Directory contents:"
          ls -la "${AGENT_DIR}/"
          exit 1
        fi
        
        # Check if instructions.md is not empty and not just the template
        if [ ! -s "${INSTRUCTIONS_FILE}" ]; then
          echo "‚ùå Error: Instructions file '${INSTRUCTIONS_FILE}' is empty"
          exit 1
        fi
        
        # Check if it still contains template placeholders (basic check)
        if grep -q "<AGENT_NAME>" "${INSTRUCTIONS_FILE}"; then
          echo "‚ö†Ô∏è  Warning: Instructions file appears to contain template placeholders"
          echo "Please customize the instructions before deployment"
          if [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            echo "‚ùå Deployment aborted due to uncustomized template"
            echo "Use dry_run=true to preview what would be deployed"
            exit 1
          fi
        fi
        
        echo "‚úÖ Agent directory validation passed"
        echo "agent-dir=${AGENT_DIR}" >> $GITHUB_OUTPUT
        echo "instructions-file=${INSTRUCTIONS_FILE}" >> $GITHUB_OUTPUT
    
    - name: Deploy agent to AWS
      id: deploy
      run: |
        if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
          echo "üîç DRY RUN MODE - No actual deployment will occur"
          echo "======================================================"
        fi
        
        python3 .github/scripts/deploy-agent.py \
          --agent-name "${{ github.event.inputs.agent_name }}" \
          --environment "${{ github.event.inputs.environment }}" \
          --agent-dir "${{ steps.validate.outputs.agent-dir }}" \
          --instructions-file "${{ steps.validate.outputs.instructions-file }}" \
          $(if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then echo "--dry-run"; fi)
    
    - name: Post-deployment validation
      if: steps.deploy.outcome == 'success' && github.event.inputs.dry_run != 'true'
      run: |
        echo "üß™ Running post-deployment validation..."
        
        # Get agent details from deployment output
        if [ -f "/tmp/agent_deployment_output.json" ]; then
          AGENT_ID=$(python3 -c "
import json
try:
    with open('/tmp/agent_deployment_output.json', 'r') as f:
        data = json.load(f)
    print(data.get('agent_id', ''))
except:
    pass
          ")
          
          if [ -n "$AGENT_ID" ]; then
            echo "üîç Validating agent ${AGENT_ID}..."
            
            # Check agent status
            AGENT_STATUS=$(aws bedrock-agent get-agent \
              --agent-id "$AGENT_ID" \
              --region us-east-1 \
              --query 'agent.agentStatus' \
              --output text 2>/dev/null || echo "ERROR")
            
            if [ "$AGENT_STATUS" == "PREPARED" ] || [ "$AGENT_STATUS" == "NOT_PREPARED" ]; then
              echo "‚úÖ Agent status: $AGENT_STATUS"
            else
              echo "‚ö†Ô∏è  Agent status: $AGENT_STATUS (may need time to initialize)"
            fi
            
            echo "‚úÖ Post-deployment validation completed"
          else
            echo "‚ö†Ô∏è  Could not extract agent ID from deployment output"
          fi
        else
          echo "‚ö†Ô∏è  No deployment output file found"
        fi
    
    - name: Deployment summary
      if: always()
      run: |
        echo "üìã Agent Deployment Summary"
        echo "============================"
        echo "ü§ñ Agent Name: ${{ github.event.inputs.agent_name }}"
        echo "üåç Environment: ${{ github.event.inputs.environment }}"
        echo "üîç Dry Run: ${{ github.event.inputs.dry_run }}"
        echo "üìÅ Agent Directory: ${{ steps.validate.outputs.agent-dir }}"
        
        if [ "${{ steps.deploy.outcome }}" == "success" ]; then
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "‚úÖ Dry run completed successfully"
            echo "üîß Ready for actual deployment"
          else
            echo "‚úÖ Deployment completed successfully"
            
            # Show deployment details if available
            if [ -f "/tmp/agent_deployment_output.json" ]; then
              echo ""
              echo "üìä Deployment Details:"
              echo "======================"
              python3 -c "
import json
try:
    with open('/tmp/agent_deployment_output.json', 'r') as f:
        data = json.load(f)
    print(f\"Agent ID: {data.get('agent_id', 'N/A')}\")
    print(f\"Agent ARN: {data.get('agent_arn', 'N/A')}\")
    print(f\"Alias ID: {data.get('alias_id', 'N/A')}\")
    print(f\"Alias Name: {data.get('alias_name', 'N/A')}\")
    print(f\"Foundation Model: {data.get('foundation_model', 'N/A')}\")
    print(f\"Knowledge Base: {data.get('knowledge_base_id', 'N/A')}\")
except Exception as e:
    print(f'Could not read deployment output: {e}')
              "
            fi
            
            echo ""
            echo "üîß Next Steps:"
            echo "1. Test the agent through the RevOps AI Framework"
            echo "2. Monitor CloudWatch logs for agent execution"
            echo "3. Update agent instructions if needed and redeploy"
            echo "4. Consider creating a production alias when ready"
          fi
        else
          echo "‚ùå Deployment failed"
          echo "üìù Check the logs above for error details"
        fi